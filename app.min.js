var $j = $j || jQuery.noConflict();

// Automatically suppress console logs if the url doesnt contain localhost
if (window.location.href.indexOf("localhost") <= 0 ) {
    console.log = function() {}
}
$j(document).ready(function(){
    init();
    // console.log(URL.location); // Outputs wordpress theme location for testing purposes.
    // simpleParallax(4,$j('.foregroundImage'));
});

function init() { 
    // Init WOW for loading content on scroll
    
    if($j('.row-ballpit').length) {
        ballpit(); 
    }

    // if($j('.row-quote').length) {
    //     ballpitQuote();  
    // }
    
}

// Ensure the init function is fired on swup transition to simulate document.ready.
if(typeof swup !== 'undefined') {
    swup.on('contentReplaced', init);
}


// $j(window).resize(function() { 
// }); 


function ballExplosion() {
    var th = $j('.container').height;
    var tl = new TimelineMax({
        repeat: -1
    });

    var bouncingBall = $j('.bouncingBall');
    var centerPoint = (th/2)-15;
    var min = 5; var max = 600;

    $j('.explosionBall').each(function(){
    var rX = Math.floor(Math.random() * max) + min; 
    var rY = Math.floor(Math.random() * max) + min;
    if(Math.random() > .5){
        var dirX = -1;
    } else {
        dirX = 1;
    }
    if(Math.random() > .5){
        var dirY = -1;
    } else {
        dirY = 1;
    }
    var mX = dirX * rX; ;
    var mY = dirY * rY; 
    this.tl = new TimelineMax({paused:true});
    this.tl.to(this,.75,{
        x: '+='+mX+'px',
        y: '+='+mY+'px',
        scale: 0,
        //repeat: -1,
        ease: Sine.easeIn
    })
    })
    $j('.centerBall').each(function(){
    this.tl = new TimelineMax({paused:true});
    this.tl.to(this,.7,{
        scale:0,
        //repeat:-1,
        ease: Sine.easeOut
    })
    })

    var off = $j('.row-ballExplosion').innerHeight() /2;
    console.log(off);
    var control = new ScrollMagic.Controller();
    var explosionScene = new ScrollMagic.Scene({
        triggerElement:'.row-ballExplosion',
        offset: off
    })
    .on('start', function(){
        $j('.centerBall , .explosionBall').each(function(){
            this.tl.play();
        });
    })
    //.addIndicators({name:'beep'})
    .addTo(control);
}
function ballpit() {
    $j(document).ready(function(){
        canvas = document.getElementById('c');
        ctx = canvas.getContext('2d');
        var w = window.innerWidth 
        canvas.width = w;
        if($j('.row-ballpit-as-hero').length) {
            canvas.height = $j('#c').height(); //window.innerHeight - $j('#header').height(); //800;
        } else {
            canvas.height = 800;
        }
        
        
        for( var i = 0; i <= BRANDED_BALLS; i++ ){
          add_ball(undefined,undefined,100,true);
        }
        for( var i = 0; i <= SMALL_BALLS; i++ ){
          add_ball(undefined,undefined,60,true,true);
        }
        while (NUM_BALLS--) add_ball();
    
        mouse.down = true;
        update();
        if($j('.row-ballpit').data('start') == 'load') {
            setInterval(startBallpit,1000);
        } else {
            var control = new ScrollMagic.Controller();
            var ballScene = new ScrollMagic.Scene({
                triggerElement:'.row-ballpit',
                offset: ( $j('.row-ballpit').height() / 2 )
            })
            .on('start', function(){
                startBallpit();
            })
            .addTo(control);
        }
    });
}

function startBallpit() {
    COLLISIONS = true;
    GRAVITY = .2;
    DAMPING = .9;
    canvas.onmousemove = function(e) {
        var rect = this.getBoundingClientRect();
        mouse.x = e.clientX - rect.left;
        mouse.y = e.clientY - rect.top;
    };
}

var winWidth = $j(window).width();
$j(window).on('resize',function(){
    if($j(this).width() !=  winWidth && $j('.row-ballpit').length) {
        canvas.width = window.innerWidth;
        canvas.height = $j('#c').height();
        //$j('#c').css('height',$j('.row-ballpit').height());
    }
});

var NUM_BALLS =  40, //8, //26
    BRANDED_BALLS = 8,
    SMALL_BALLS = 5,
    DAMPING = .7, //0.7
    GRAVITY = 0; // 0.6,
    MOUSE_SIZE = 25,
    SPEED = 1;
    COLLISIONS = false;

var canvas, ctx, TWO_PI = Math.PI * 2, balls = [], mouse = {down:false,x:0,y:0};

window.requestAnimFrame =
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function(callback) {
        window.setTimeout(callback, 1000 / 60);
    };


function pickBackground(small) {
  var sm = small;
  if(!sm){
    var n = Math.floor(Math.random()*iArr.length);
    var returnBackground = iArr[n];     
    iArr.splice(n,1);
  } else {
    var n = Math.floor(Math.random()*sIArr.length);
    var returnBackground = sIArr[n];     
    sIArr.splice(n,1);
  }
  
  return returnBackground;
}

var Ball = function(x, y, radius,b ,sm) {

    this.x = x;
    this.y = y;

    this.px = x;
    this.py = y;

    this.fx = 0;
    this.fy = 0;
    this.sm = sm;
    this.b = b;
    if(this.b === true) { //Math.random() > .5
        this.img = new Image();
        this.img.src = pickBackground(this.sm);
        this.bkg = this.img;
    } else {
        this.c = cArr[Math.floor(Math.random()*cArr.length)];
        this.bkg = this.c;
    }
    this.radius = radius;
};

Ball.prototype.apply_force = function(delta) {
    if(COLLISIONS = true){
      delta *= delta;
      this.fy += GRAVITY;

      this.x += this.fx * delta;
      this.y += this.fy * delta;

      this.fx = this.fy = 0;
    }
    
};

Ball.prototype.verlet = function() {
if(COLLISIONS = true){
    var nx = (this.x * 2) - this.px;
    var ny = (this.y * 2) - this.py;

    this.px = this.x;
    this.py = this.y;

    this.x = nx;
    this.y = ny;
   }
};

Ball.prototype.draw = function(ctx) {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.radius, 0, TWO_PI);
    if( typeof this.bkg === 'string' || this.bkg instanceof String){
    ctx.fillStyle = this.bkg;
    } else {
    ctx.fillStyle = ctx.createPattern(this.img,'repeat');
    }
    ctx.save();
    ctx.translate((this.x - this.radius),(this.y - this.radius));
    ctx.fill();
    ctx.restore();
};

//---------------------------------------

var resolve_collisions = function(ip) {

    var i = balls.length;

    while (i--) {

        var ball_1 = balls[i];

        if (mouse.down) {

            var diff_x = ball_1.x - mouse.x;
            var diff_y = ball_1.y - mouse.y;
            var dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y);
            var real_dist = dist - (ball_1.radius + MOUSE_SIZE);

            if (real_dist < 0) {

                var depth_x = diff_x * (real_dist / dist);
                var depth_y = diff_y * (real_dist / dist);

                ball_1.x -= depth_x * 0.005;
                ball_1.y -= depth_y * 0.005;
            }
        }

        var n = balls.length;

        while (n--) {

            if (n == i) continue;
          
            var ball_2 = balls[n];

            var diff_x = ball_1.x - ball_2.x;
            var diff_y = ball_1.y - ball_2.y;

            var length    = diff_x * diff_x + diff_y * diff_y;
            var dist      = Math.sqrt(length);
            var real_dist = dist - (ball_1.radius + ball_2.radius);

            if (real_dist < 0) {

                var vel_x1 = ball_1.x - ball_1.px;
                var vel_y1 = ball_1.y - ball_1.py;
                var vel_x2 = ball_2.x - ball_2.px;
                var vel_y2 = ball_2.y - ball_2.py;

                var depth_x = diff_x * (real_dist / dist);
                var depth_y = diff_y * (real_dist / dist);

                ball_1.x -= depth_x * 0.5;
                ball_1.y -= depth_y * 0.5;
                
                ball_2.x += depth_x * 0.5;
                ball_2.y += depth_y * 0.5;

                if (ip) {

                    var pr1 = DAMPING * (diff_x*vel_x1+diff_y*vel_y1) / length,
                        pr2 = DAMPING * (diff_x*vel_x2+diff_y*vel_y2) / length;

                    vel_x1 += pr2 * diff_x - pr1 * diff_x;
                    vel_x2 += pr1 * diff_x - pr2 * diff_x;

                    vel_y1 += pr2 * diff_y - pr1 * diff_y;
                    vel_y2 += pr1 * diff_y - pr2 * diff_y;

                    ball_1.px = ball_1.x - vel_x1;
                    ball_1.py = ball_1.y - vel_y1;

                    ball_2.px = ball_2.x - vel_x2;
                    ball_2.py = ball_2.y - vel_y2;
                }
            }
        }
    }
};

var check_walls = function() {

    var i = balls.length;

    while (i--) {

        var ball = balls[i];

        if (ball.x < ball.radius) {

            var vel_x = ball.px - ball.x;
            ball.x = ball.radius;
            ball.px = ball.x - vel_x * DAMPING;

        } else if (ball.x + ball.radius > canvas.width) {

            var vel_x = ball.px - ball.x;
            ball.x = canvas.width - ball.radius;
            ball.px = ball.x - vel_x * DAMPING;
        }

        if (ball.y < ball.radius) {

            var vel_y = ball.py - ball.y;
            ball.y = ball.radius;
            ball.py = ball.y - vel_y * DAMPING;

        } else if (ball.y + ball.radius > canvas.height) {

            var vel_y = ball.py - ball.y;
            ball.y = canvas.height - ball.radius;
            ball.py = ball.y - vel_y * DAMPING;
        }
    }
};

var cArr = [
  '#84f1f4',
  '#e63241',
  '#e60176',
  '#592884'
]
console.log(URL.location);
var iArr = [
    ''+URL.location+'/ball-rgb-1.png',
    ''+URL.location+'/ball-rgb-2.png',
    ''+URL.location+'/ball-rgb-3.png',
    ''+URL.location+'/ball-rgb-4.png',
    ''+URL.location+'/ball-rgb-5.png',
    ''+URL.location+'/ball-rgb-6.png',
    ''+URL.location+'/ball-rgb-7.png',
    ''+URL.location+'/ball-rgb-8.png',
    ''+URL.location+'/ball-rgb-9.png',
    ''+URL.location+'/ball-rgb-10.png',
    ''+URL.location+'/ball-rgb-11.png',
    ''+URL.location+'/ball-rgb-12.png',
    ''+URL.location+'/ball-rgb-13.png'
]
var sIArr = [
    ''+URL.location+'/small/ball-rgb-1.png',
    ''+URL.location+'/small/ball-rgb-2.png',
    ''+URL.location+'/small/ball-rgb-3.png',
    ''+URL.location+'/small/ball-rgb-4.png',
    ''+URL.location+'/small/ball-rgb-5.png',
    ''+URL.location+'/small/ball-rgb-6.png',
    ''+URL.location+'/small/ball-rgb-7.png',
    ''+URL.location+'/small/ball-rgb-8.png',
    ''+URL.location+'/small/ball-rgb-9.png',
    ''+URL.location+'/small/ball-rgb-10.png',
    ''+URL.location+'/small/ball-rgb-11.png',
    ''+URL.location+'/small/ball-rgb-12.png',
    ''+URL.location+'/small/ball-rgb-13.png'
]

var update = function() {
    var iter = 6;
    var delta = SPEED / iter;
    if(COLLISIONS === true){
      while (iter--) {
        var i = balls.length;
        while (i--) {
            balls[i].apply_force(delta);
            balls[i].verlet();
        }
        resolve_collisions();
        check_walls();
        var i = balls.length;
        while (i--) balls[i].verlet();
        resolve_collisions(1);
        
        check_walls();
      }    
    }
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    var i = balls.length;
    while (i--) balls[i].draw(ctx);
  
    requestAnimFrame(update);
};

var add_ball = function(x, y, r ,b, sm) {
    var x = x || Math.random() * (canvas.width - 100) + 30, // x || Math.random() * (canvas.width - 60) + 30,
        y = y || Math.random() * (canvas.height - 200) + 30, // y || Math.random() * (canvas.height - 60) + 30,
        r = r || 20 + Math.random() * 60,
        b = b || false,
        sm = sm || false,
        s = true,
        i = balls.length;
    while (i--) {
        var ball = balls[i];
        var diff_x = ball.x - x;
        var diff_y = ball.y - y;
        var dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y);
        if (dist < ball.radius + r) {
            s = false;
            break;
        }
    };
    
    var c = cArr[Math.floor(Math.random()*cArr.length)];
    if (s) balls.push(new Ball(x, y, r , b , sm));
};
//bounceAmpContainer
function bounceAmplitude() {
    var bounceTl = new TimelineMax({paused:true});
    var ballDur = 4;
    var ball = '.ba14';
    var maskLine = '.ballPath';
    var mask = '#rectMask';
    var ballPath = MorphSVGPlugin.pathDataToBezier(".ballPath", {align:ball});
    TweenMax.set(ball,{xPercent:-50, yPercent:-50});
    
    bounceTl.from(ball,ballDur,{
        bezier: {values:ballPath, type:'cubic'}
    },0);

    bounceTl.to(maskLine,ballDur,{
        drawSVG:"0"
    },0);
    
    var bounceAmplitudeControl = new ScrollMagic.Controller();
    var bounceAmplitudeControlScene = new ScrollMagic.Scene({
        triggerElement:'.bounceAmpContainer',
        offset: ( $j('.bounceAmpContainer').height() / 4 )
    })
    .on('start', function(){
        bounceTl.play();
    })
    //.addIndicators({name:'beep'})
    .addTo(bounceAmplitudeControl);

}
$j('.button').on({
    mouseenter: function(){
        $j(this).addClass('activeButton');
    },
    mouseleave: function(){
        $j(this).bind('animationiteration webkitAnimationIteration', function(){
            $j(this).removeClass('activeButton');
            $j(this).unbind('animationiteration webkitAnimationIteration');
        })
    }
})

